/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.LocalOfficial;

import Business.AirQuality.AirIndex;
import Business.Enterprise.Enterprise;
import Business.Organization.LocalOfficialOrganization;
import Business.Sensor.Sensor;
import Business.Sensor.SensorDirectory;
import Business.Street.Street;
import Business.UserAccount.UserAccount;
import com.teamdev.jxbrowser.chromium.Browser;
import com.teamdev.jxbrowser.chromium.swing.BrowserView;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.event.ActionEvent;
import java.io.File;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author priyank
 */
public class LocateSensorJPanel extends javax.swing.JPanel {

    public static final int MIN_ZOOM = 0;
    public static final int MAX_ZOOM = 21;
    private JPanel userProcessContainer;
    private SensorDirectory sensorDirectory;
    private LocalOfficialOrganization localOfficialOrganization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    final Browser browser;
    private Street street;

    /**
     * Creates new form ManageSensor
     */
    public LocateSensorJPanel(JPanel userProcessContainer, UserAccount userAccount, SensorDirectory sensorDirectory, LocalOfficialOrganization localOfficialOrganization, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.sensorDirectory = sensorDirectory;
        this.localOfficialOrganization = localOfficialOrganization;
        this.enterprise = enterprise;

        browser = new Browser();
        BrowserView browserView = new BrowserView(browser);
        //browser.loadURL("\\FitBitCity\\src\\Business\\Jars\\map.html");
        File myFile = new File("map.html");
        System.out.println(myFile.getAbsolutePath());
        browser.loadURL(myFile.getAbsolutePath());
        mapJPanel.add(browserView, BorderLayout.CENTER);
        revalidate();
        repaint();

        //streetJTextField.setText(userAccount.getStreetLocation());
        street = userAccount.getStreetLocation();
        streetJTextField.setText(String.valueOf(street));
        populateCombo();
        populateSensorList();
    }

    public void populateSensorList() {
        DefaultTableModel model = (DefaultTableModel) manageSensorsJTable.getModel();
        model.setRowCount(0);
        Street street = userAccount.getStreetLocation();
        for (Sensor sensor : street.getSensorDirectory().getSensorList()) {
            Object[] row = new Object[4];
            row[0] = sensor;
            row[1] = sensor.getSensorId();
            row[2] = sensor.getLatitude();
            row[3] = sensor.getLongitude();
            model.addRow(row);
        }
    }

    public void populateCombo() {
        sensorNameJComboBox.removeAllItems();
        for (Sensor sensor : street.getSensorDirectory().getSensorList()) {
            sensorNameJComboBox.addItem(sensor);
        }
    }

    public void refreshPerformed(ActionEvent e) {
        browser.executeJavaScript("var myLatlng = new google.maps.LatLng(42.3000, -71.8000);\n"
                + "var marker = new google.maps.Marker({\n"
                + "    position: myLatlng,\n"
                + "    map: map,\n"
                + "    title: 'Massachusetts'\n"
                + "});");
    }

    public void actionPerformed(ActionEvent e) {
        Sensor sensor = (Sensor) sensorNameJComboBox.getSelectedItem();
        String latitude = String.valueOf(sensor.getLatitude());
        String longitude = String.valueOf(sensor.getLongitude());
        int pos = sensor.getAirIndexDirectory().getAirIndexList().size();
        AirIndex airIndex = sensor.getAirIndexDirectory().getAirIndexList().get(pos - 1);
        String result = airIndex.getResult();
        //if(result.toString().equalsIgnoreCase("Good")){
        browser.executeJavaScript("var myLatlng = new google.maps.LatLng(" + latitude + "," + longitude + ");\n"
                + "var marker = new google.maps.Marker({\n"
                //+ "    icon:'http://maps.google.com/mapfiles/ms/icons/green-dot.png',\n"
                + "    position: myLatlng,\n"
                + "    map: map,\n"
                + "    animation: google.maps.Animation.DROP,\n"
                + "    title: '" + result + "',\n"
                + "});");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        manageSensorsJTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        removeJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        mapJPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        streetJTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        sensorNameJComboBox = new javax.swing.JComboBox();
        checkJButton = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();

        manageSensorsJTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        manageSensorsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Sensor Name", "Sensor Id", "Latitude", "Longitude"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(manageSensorsJTable);

        jLabel3.setFont(new java.awt.Font("Agency FB", 1, 24)); // NOI18N
        jLabel3.setText("Manage Sensors");

        removeJButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        removeJButton.setText("Remove Sensor");
        removeJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeJButtonActionPerformed(evt);
            }
        });

        backJButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        backJButton.setText("Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        mapJPanel.setLayout(new java.awt.BorderLayout());

        jLabel4.setText("Street");

        streetJTextField.setEnabled(false);

        jLabel5.setText("Sensor");

        checkJButton.setText("Get Location");
        checkJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkJButtonActionPerformed(evt);
            }
        });

        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(114, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(streetJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(sensorNameJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(checkJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(refreshJButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(backJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(removeJButton))
                    .addComponent(mapJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(242, 242, 242))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 570, Short.MAX_VALUE))
                .addContainerGap(115, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel3)
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refreshJButton)
                    .addComponent(checkJButton)
                    .addComponent(sensorNameJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(streetJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(10, 10, 10)
                .addComponent(mapJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backJButton)
                    .addComponent(removeJButton))
                .addGap(22, 22, 22))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void removeJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeJButtonActionPerformed
        int row = manageSensorsJTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        } else {
            Sensor sensor = (Sensor) manageSensorsJTable.getValueAt(row, 0);
            userAccount.getStreetLocation().getSensorDirectory().removeSensor(sensor);
            populateSensorList();
            JOptionPane.showMessageDialog(null, "Sensor Removed Successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
            populateCombo();
        }
    }//GEN-LAST:event_removeJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void checkJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkJButtonActionPerformed
        if (userAccount.getStreetLocation().getSensorDirectory().getSensorList().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The street has no sensors installed currently.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            actionPerformed(evt);
        }
    }//GEN-LAST:event_checkJButtonActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        refreshPerformed(evt);
    }//GEN-LAST:event_refreshJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JButton checkJButton;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable manageSensorsJTable;
    private javax.swing.JPanel mapJPanel;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JButton removeJButton;
    private javax.swing.JComboBox sensorNameJComboBox;
    private javax.swing.JTextField streetJTextField;
    // End of variables declaration//GEN-END:variables
}
