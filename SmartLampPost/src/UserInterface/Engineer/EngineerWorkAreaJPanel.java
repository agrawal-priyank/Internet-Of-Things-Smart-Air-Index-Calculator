/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Engineer;

import Business.EcoSystem.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.EngineerOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.OfficialAirQualityCheckRequest;
import Business.WorkQueue.ResidentAirQualityCheckRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Priyank
 */
public class EngineerWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private EngineerOrganization engineerOrganization;
    private Enterprise enterprise;
    private EcoSystem ecoSystem;

    /**
     * Creates new form EngineerWorkAreaJPanel
     */
    public EngineerWorkAreaJPanel(JPanel userProcessContainer, UserAccount userAccount, EngineerOrganization engineerOrganization, Enterprise enterprise, EcoSystem ecoSystem) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.engineerOrganization = engineerOrganization;
        this.enterprise = enterprise;
        this.ecoSystem = ecoSystem;

        streetLocationJTextField.setText(userAccount.getStreetLocation().toString());
        engineerJLabel.setText(userAccount.getEmployee().getEmployeeName());
        cityJLabel.setText(enterprise.getName());
        stateJLabel.setText("MA, USA");

        populateResidentRequestTable();
        populateOfficialRequestTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        officialRequestJTable = new javax.swing.JTable();
        processJButton = new javax.swing.JButton();
        assignJButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        residentRequestJTable = new javax.swing.JTable();
        assignResidentJButton = new javax.swing.JButton();
        processResidentJButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        streetLocationJTextField = new javax.swing.JTextField();
        searchSensorJButton = new javax.swing.JButton();
        searchSensorJButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        engineerJLabel = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        cityJLabel = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        stateJLabel = new javax.swing.JLabel();

        officialRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sensor", "Sendor", "Receiver", "Request Date", "Resolve Date", "Message", "Result", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(officialRequestJTable);

        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });

        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Agency FB", 1, 24)); // NOI18N
        jLabel3.setText("Engineer Work Area");

        residentRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sensor", "Sendor", "Receiver", "Request Date", "Resolve Date", "Message", "Result", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(residentRequestJTable);

        assignResidentJButton.setText("Assign to me");
        assignResidentJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignResidentJButtonActionPerformed(evt);
            }
        });

        processResidentJButton.setText("Process");
        processResidentJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processResidentJButtonActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Agency FB", 1, 18)); // NOI18N
        jLabel4.setText("Resident Request");

        jLabel5.setFont(new java.awt.Font("Agency FB", 1, 18)); // NOI18N
        jLabel5.setText("Local Official Request");

        jLabel6.setFont(new java.awt.Font("Agency FB", 0, 18)); // NOI18N
        jLabel6.setText("Street");

        streetLocationJTextField.setFont(new java.awt.Font("Agency FB", 0, 18)); // NOI18N
        streetLocationJTextField.setEnabled(false);

        searchSensorJButton.setText("Search Sensor Location");
        searchSensorJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchSensorJButtonActionPerformed(evt);
            }
        });

        searchSensorJButton1.setText("Search Sensor Location");
        searchSensorJButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchSensorJButton1ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Agency FB", 1, 24)); // NOI18N
        jLabel7.setText("Welcome");

        engineerJLabel.setFont(new java.awt.Font("Agency FB", 0, 24)); // NOI18N
        engineerJLabel.setText("value");

        jLabel8.setFont(new java.awt.Font("Agency FB", 1, 24)); // NOI18N
        jLabel8.setText("City");

        cityJLabel.setFont(new java.awt.Font("Agency FB", 0, 24)); // NOI18N
        cityJLabel.setText("value");

        jLabel9.setFont(new java.awt.Font("Agency FB", 1, 24)); // NOI18N
        jLabel9.setText("State");

        stateJLabel.setFont(new java.awt.Font("Agency FB", 0, 24)); // NOI18N
        stateJLabel.setText("value");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(90, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addGap(18, 18, 18)
                                    .addComponent(streetLocationJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel5))
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(assignJButton)
                                    .addGap(157, 157, 157)
                                    .addComponent(searchSensorJButton1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(processJButton))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(assignResidentJButton)
                                    .addGap(161, 161, 161)
                                    .addComponent(searchSensorJButton)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(processResidentJButton))))
                        .addGap(70, 70, 70))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(engineerJLabel)
                        .addGap(116, 116, 116)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(322, 322, 322))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cityJLabel)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(stateJLabel)
                                .addGap(76, 76, 76))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jLabel3))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(engineerJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8)
                        .addComponent(cityJLabel)
                        .addComponent(jLabel9)
                        .addComponent(stateJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(streetLocationJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(processJButton)
                    .addComponent(assignJButton)
                    .addComponent(searchSensorJButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignResidentJButton)
                    .addComponent(processResidentJButton)
                    .addComponent(searchSensorJButton))
                .addContainerGap(42, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed

        int selectedRow = officialRequestJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            OfficialAirQualityCheckRequest request = (OfficialAirQualityCheckRequest) officialRequestJTable.getValueAt(selectedRow, 0);
            if (request.getReceiver() == userAccount) {
                if (request.getStatus().equalsIgnoreCase("Pending") || request.getStatus().equalsIgnoreCase("Processing")) {
                    request.setStatus("Processing");

                    ProcessOfficialWorkRequestJPanel processWorkRequestJPanel = new ProcessOfficialWorkRequestJPanel(userProcessContainer, request);
                    userProcessContainer.add("ProcessWorkRequestJPanel", processWorkRequestJPanel);
                    CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                    layout.next(userProcessContainer);
                } else {
                    JOptionPane.showMessageDialog(null, "Request has been already completed.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please assign the Request to yourselves.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_processJButtonActionPerformed

    public void populateOfficialRequestTable() {
        DefaultTableModel model = (DefaultTableModel) officialRequestJTable.getModel();
        model.setRowCount(0);
        for (WorkRequest request : engineerOrganization.getWorkQueue().getWorkRequestList()) {
            if (request instanceof OfficialAirQualityCheckRequest) {
                if (userAccount.getStreetLocation().getStreetName().equalsIgnoreCase(request.toString())) {
                    Object[] row = new Object[8];
                    row[0] = request;
                    row[1] = request.getSender();
                    row[2] = request.getReceiver();
                    row[3] = request.getRequestDate();
                    row[4] = request.getResolveDate();
                    row[5] = request.getMessage();
                    row[6] = ((OfficialAirQualityCheckRequest) request).getTestResult();
                    row[7] = request.getStatus();
                    model.addRow(row);
                }
            }
        }
    }

    public void populateResidentRequestTable() {
        DefaultTableModel model = (DefaultTableModel) residentRequestJTable.getModel();
        model.setRowCount(0);
        for (WorkRequest request : engineerOrganization.getWorkQueue().getWorkRequestList()) {
            if (request instanceof ResidentAirQualityCheckRequest) {
                if (userAccount.getStreetLocation().toString().equalsIgnoreCase(request.toString())) {
                    Object[] row = new Object[8];
                    row[0] = request;
                    row[1] = request.getSender();
                    row[2] = request.getReceiver();
                    row[3] = request.getRequestDate();
                    row[4] = request.getResolveDate();
                    row[5] = request.getMessage();
                    row[6] = ((ResidentAirQualityCheckRequest) request).getTestResult();
                    row[7] = request.getStatus();
                    model.addRow(row);
                }
            }
        }
    }

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed

        int selectedRow = officialRequestJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            WorkRequest request = (WorkRequest) officialRequestJTable.getValueAt(selectedRow, 0);
            if (request.getReceiver() == null) {
                request.setReceiver(userAccount);
                request.setStatus("Pending");
                populateOfficialRequestTable();
                JOptionPane.showMessageDialog(null, "Request has been assigned to you.", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Request has been already assigned.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void assignResidentJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignResidentJButtonActionPerformed
        int selectedRow = residentRequestJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            WorkRequest request = (WorkRequest) residentRequestJTable.getValueAt(selectedRow, 0);
            if (request.getReceiver() == null) {
                request.setReceiver(userAccount);
                request.setStatus("Pending");
                populateResidentRequestTable();
                JOptionPane.showMessageDialog(null, "Request has been assigned to you.", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Request has been already assigned.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_assignResidentJButtonActionPerformed

    private void processResidentJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processResidentJButtonActionPerformed
        int selectedRow = residentRequestJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            ResidentAirQualityCheckRequest request = (ResidentAirQualityCheckRequest) residentRequestJTable.getValueAt(selectedRow, 0);
            if (request.getStatus().equalsIgnoreCase("Forwarded")) {
                JOptionPane.showMessageDialog(null, "Please assign the work request first.", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                if (request.getStatus().equalsIgnoreCase("Pending") || request.getStatus().equalsIgnoreCase("Processing")) {
                    request.setStatus("Processing");
                    ProcessResidentWorkRequestJPanel processWorkRequestJPanel = new ProcessResidentWorkRequestJPanel(userProcessContainer, request);
                    userProcessContainer.add("ProcessWorkRequestJPanel", processWorkRequestJPanel);
                    CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                    layout.next(userProcessContainer);
                } else {
                    JOptionPane.showMessageDialog(null, "Request has been already completed.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_processResidentJButtonActionPerformed

    private void searchSensorJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchSensorJButtonActionPerformed
        int Row = residentRequestJTable.getSelectedRow();
        if (Row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            SearchSensorLocationJPanel searchSensorLocationJPanel = new SearchSensorLocationJPanel(userProcessContainer, userAccount, engineerOrganization, enterprise, ecoSystem);
            userProcessContainer.add("SearchSensorLocationJPanel", searchSensorLocationJPanel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
    }//GEN-LAST:event_searchSensorJButtonActionPerformed

    private void searchSensorJButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchSensorJButton1ActionPerformed
        int selectedRow = officialRequestJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            
            SearchSensorLocationJPanel searchSensorLocationJPanel = new SearchSensorLocationJPanel(userProcessContainer, userAccount, engineerOrganization, enterprise, ecoSystem);
            userProcessContainer.add("SearchSensorLocationJPanel", searchSensorLocationJPanel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
    }//GEN-LAST:event_searchSensorJButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JButton assignResidentJButton;
    private javax.swing.JLabel cityJLabel;
    private javax.swing.JLabel engineerJLabel;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable officialRequestJTable;
    private javax.swing.JButton processJButton;
    private javax.swing.JButton processResidentJButton;
    private javax.swing.JTable residentRequestJTable;
    private javax.swing.JButton searchSensorJButton;
    private javax.swing.JButton searchSensorJButton1;
    private javax.swing.JLabel stateJLabel;
    private javax.swing.JTextField streetLocationJTextField;
    // End of variables declaration//GEN-END:variables
}
